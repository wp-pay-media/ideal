%!PS-Adobe-2.0 EPSF-1.2%%Title: Rabobank vector%%Creator: FreeHand MX 11.0.2%%CreationDate: 9/16/08 12:15 PM%%BoundingBox: 0 0 454 547%%FHPathName:Eden HD:Users:ew10:Desktop:Rabobank:Vector logo:Rabobank vector%ALDOriginalFile:Eden HD:Users:ew10:Desktop:Rabobank:Vector logo:Rabobank vector%ALDBoundingBox: -194 -324 647 867%%FHPageNum:1%%DocumentSuppliedResources: procset Altsys_header 4 0%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%CMYKProcessColor: 0 0.5 1 0 (0c 50m 100y 0k)%%+ 0 0.3 0.5 0 (0c 30m 50y 0k)%%+ 0 0.25 0.8 0 (0c 25m 80y 0k)%%+ 0.15 0.85 1 0 (15c 85m 100y 0k)%%+ 1 0.8 0 0 (100c 80m 0y 0k)%%+ 1 0.8 0 0.2 (100c 80m 0y 20k)%%+ 0.3 0.3 0.12 0 (30c 30m 12y 0k)%%+ 0.25 0.58 0.75 0 (25c 58m 75y 0k)%%+ 0.5 0.65 0.52 0 (50c 65m 52y 0k)%%+ 0.8 0.75 0.2 0 (80c 75m 20y 0k)%%+ 1 0.6 0 0 (100c 60m 0y 0k)%%+ 0 0 0 0 (0c 0m 0y 0k)%%+ 0 0.6 1 0 (255r 102g 0b)%%+ 1 1 0.4 0 (0r 0g 153b)%%+ 0 0.2 0.8 0 (255r 204g 51b)%%+ 0.2 0.8 1 0 (204r 51g 0b)%%+ 1 1 0.8 0 (0r 0g 51b)%%+ 0 0 0 0 (255r 255g 255b)%%EndComments%%BeginResource: procset Altsys_header 4 0userdict begin /AltsysDict 300 dict def endAltsysDict begin/bdf{bind def}bind def/xdf{exch def}bdf/defed{where{pop true}{false}ifelse}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/Xic{matrix invertmatrix concat}bdf/Xq{matrix currentmatrix mark}bdf/XQ{cleartomark setmatrix}bdf/sepdef{dup where not{AltsysSepDict}if 3 1 roll exch put}bdf/st{settransfer}bdf/colorimage defed /_rci xdf/cntr 0 def/readbinarystring{/cntr 0 def2 copy readstring{{dup(\034) search{length exch pop exchdup length 0 ne{dup dup 0 get 32 sub 0 exch put /cntr cntr 1 add def}{pop 1 string dup0 6 index read pop 32 sub put}ifelse3 copyputinterval pop1 add1 index length 1 sub1 index sub dup 0 le {pop pop exit}ifgetinterval}{pop exit} ifelse} loop}ifcntr 0 gt{pop 2 copydup length cntr sub cntr getintervalreadbinarystring} ifpop exch pop} bdf/_NXLevel2 defed { _NXLevel2 not { /colorimage where {userdict eq {/_rci false def } if} if} if} if/md defed{ md type /dicttype eq { /colorimage where { md eq { /_rci false def }if}if/settransfer where {md eq {/st systemdict /settransfer get def}if}if}if }if/setstrokeadjust defed{true setstrokeadjust/C{curveto}bdf/L{lineto}bdf/m{moveto}bdf}{/dr{transform .25 sub round .25 add exch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/setstrokeadjust{pop}bdf }ifelse/privrectpath { 4 -2 roll mdtransform round exch round exch idtransform 2 copy 0 lt exch 0 lt xor{dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto}{exch dup 0 rlineto exch 0 exch rlineto neg 0 rlineto}ifelseclosepath}bdf/rectclip{newpath privrectpath clip newpath}def/rectfill{gsave newpath privrectpath fill grestore}def/rectstroke{gsave newpath privrectpath stroke grestore}def/_fonthacksave false def/currentpacking defed {/_bfh {/_fonthacksave currentpacking def false setpacking} bdf/_efh {_fonthacksave setpacking} bdf}{/_bfh {} bdf/_efh {} bdf}ifelse/packedarray{array astore readonly}ndf/` { false setoverprint /-save0- save def5 index concatpopstorerect left bottom width height rectclippop/MMdict_count countdictstack def/MMop_count count 1 sub defuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath} bdf/currentpacking defed{true setpacking}if/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/xformfont { currentfont exch makefont setfont } bdf/fhnumcolors 1 statusdict begin/processcolors defed {pop processcolors}{/deviceinfo defed {deviceinfo /Colors known {pop deviceinfo /Colors get} if} if} ifelseend def/printerRes gsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/graycalcs[{Angle Frequency} {GrayAngle GrayFrequency} {0 Width Height matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div} {0 GrayWidth GrayHeight matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div} ] def/calcgraysteps {forcemaxsteps{maxsteps}{/currenthalftone defed{currenthalftone /dicttype eq}{false}ifelse{currenthalftone beginHalftoneType 4 le{graycalcs HalftoneType 1 sub get exec}{HalftoneType 5 eq{Default begin{graycalcs HalftoneType 1 sub get exec}end}{0 60} ifelse}ifelseend}{currentscreen pop exch }ifelseprinterRes 300 max exch div exch 2 copy sin mul round dup mul 3 1 roll cos mul round dup mul add 1 add dup maxsteps gt {pop maxsteps} if dup minsteps lt {pop minsteps} if }ifelse} bdf/nextrelease defed { /languagelevel defed not { /framebuffer defed { 0 40 string framebuffer 9 1 roll 8 {pop} repeatdup 516 eq exch 520 eq or{/fhnumcolors 3 def/currentscreen {60 0 {pop pop 1}}bdf/calcgraysteps {maxsteps} bdf}if}if}if}iffhnumcolors 1 ne {/calcgraysteps {maxsteps} bdf} if/currentpagedevice defed {currentpagedevice /PreRenderingEnhance known{currentpagedevice /PreRenderingEnhance get{/calcgraysteps {forcemaxsteps {maxsteps}{256 maxsteps min}ifelse} def} if} if} if/gradfrequency 144 defprinterRes 1000 lt {/gradfrequency 72 def} if/adjnumsteps {dup dtransform abs exch abs max printerRes div gradfrequency mul round 5 max min }bdf/goodsep {spots exch get 4 get dup sepname eq exch (_vc_Registration) eq or}bdf/BeginGradation defed{/bb{BeginGradation}bdf}{/bb{}bdf}ifelse/EndGradation defed{/eb{EndGradation}bdf}{/eb{}bdf}ifelse/bottom -0 def /delta -0 def /frac -0 def /height -0 def /left -0 def /numsteps1 -0 def /radius -0 def /right -0 def /top -0 def /width -0 def /xt -0 def /yt -0 def /df currentflat def /tempstr 1 string def /clipflatness currentflat def /inverted? 0 currenttransfer exec .5 ge def/tc1 [0 0 0 1] def /tc2 [0 0 0 1] def /storerect{/top xdf /right xdf /bottom xdf /left xdf /width right left sub def /height top bottom sub def}bdf/concatprocs{systemdict /packedarray known {dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{ /proc2 exch cvlit def /proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{ /proc2 exch cvlit def /proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/i{dup 0 eq{pop df dup} {dup} ifelse /clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{ {/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/normtaper{}bdf/logtaper{9 mul 1 add log}bdf/CD{/NF exch def { exch dup /FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length /Len exch def dup length Len add string dup Len 4 -1 roll putinterval dup 0 4 -1 roll putinterval }bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{ dup FontDirectory exch known {pop 3 -1 roll pop} {RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdf/RCJ{4 -1 roll /ourvec xdf 256 string cvs (|______) anchorsearch{pop cvn dup FDFJ exch 1 index eq {_bfh findfont _efh dup maxlength dict CD dup /FontName 3 index put dup /Encoding ourvec put 1 index exch definefont pop }{exch pop} ifelse}{pop} ifelse}bdf/RFJ{ dup FontDirectory exch known {pop 3 -1 roll pop} {RCJ} ifelse}bdf/hasfont{/resourcestatus where {pop /Font resourcestatus{ pop pop true}{ false}ifelse}{dup FontDirectory exch known{pop true}{256 stringcvs(fonts/) exch MNstatus{pop pop pop pop true}{false}ifelse}ifelse}ifelse}bdf/FDFJ{dup hasfont not { pop/Ryumin-Light-83pv-RKSJ-Hhasfont {/Ryumin-Light-83pv-RKSJ-H}{/Courier}ifelse }if}bdf/FFJ{_bfhdup 256 string cvs (|______)exch MN cvn dup FontDirectoryexch known { exch pop findfont 3 -1 roll pop }{ pop FDFJ dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get dup length 256 eq{256 array copy 7 -1 roll { 3 -1 roll dup 4 -2 roll put }forallput definefont }{7 -1 roll pop pop pop pop pop findfont}ifelse}ifelse_efh}bdf/GS {dup hasfont {findfontexch makesetfontexchpopts}{pop pop popts} ifelse} bdf/RCK{4 -1 roll /ourvec xdf 256 string cvs (|______) anchorsearch{pop cvn dup FDFK exch 1 index eq {_bfh findfont _efh dup maxlength dict CD dup /FontName 3 index put dup /Encoding ourvec put 1 index exch definefont pop }{exch pop} ifelse}{pop} ifelse}bdf/RFK{ dup FontDirectory exch known {pop 3 -1 roll pop} {RCK} ifelse}bdf/hasfont{/resourcestatus where {pop /Font resourcestatus{ pop pop true}{ false}ifelse}{dup FontDirectory exch known{pop true}{256 stringcvs(fonts/) exch MNstatus{pop pop pop pop true}{false}ifelse}ifelse}ifelse}bdf/FDFK{dup hasfont not { pop/JCsmhasfont {/JCsm}{/Courier}ifelse }if}bdf/FFK{_bfhdup 256 string cvs (|______)exch MN cvn dup FontDirectoryexch known { exch pop findfont 3 -1 roll pop }{ pop FDFK dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll { 3 -1 roll dup 4 -2 roll put }forallput definefont }ifelse_efh}bdf/RCTC{4 -1 roll /ourvec xdf 256 string cvs (|______) anchorsearch{pop cvn dup FDFTC exch 1 index eq {_bfh findfont _efh dup maxlength dict CD dup /FontName 3 index put dup /Encoding ourvec put 1 index exch definefont pop }{exch pop} ifelse}{pop} ifelse}bdf/RFTC{ dup FontDirectory exch known {pop 3 -1 roll pop} {RCTC} ifelse}bdf/FDFTC{dup hasfont not { pop/DFMing-Lt-HK-BFhasfont {/DFMing-Lt-HK-BF}{/Courier}ifelse }if}bdf/FFTC{_bfhdup 256 string cvs (|______)exch MN cvn dup FontDirectoryexch known { exch pop findfont 3 -1 roll pop }{ pop FDFTC dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll { 3 -1 roll dup 4 -2 roll put }forallput definefont }ifelse_efh}bdf/RCSC{4 -1 roll /ourvec xdf 256 string cvs (|______) anchorsearch{pop cvn dup FDFSC exch 1 index eq {_bfh findfont _efh dup maxlength dict CD dup /FontName 3 index put dup /Encoding ourvec put 1 index exch definefont pop }{exch pop} ifelse}{pop} ifelse}bdf/RFSC{ dup FontDirectory exch known {pop 3 -1 roll pop} {RCSC} ifelse}bdf/FDFSC{dup hasfont not { pop/zh-gbscript-1.11hasfont {/zh-gbscript-1.11}{/Courier}ifelse }if}bdf/FFSC{_bfhdup 256 string cvs (|______)exch MN cvn dup FontDirectoryexch known { exch pop findfont 3 -1 roll pop }{ pop FDFSC dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll { 3 -1 roll dup 4 -2 roll put }forallput definefont }ifelse_efh}bdf/fps{currentflat exch dup 0 le{pop 1}if {dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if} {exit} ifelse}loop pop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf /W{/clipper load 100 clipflatness dup setflat fps}bdfuserdict begin /BDFontDict 29 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}def/:M {pop pop} def/sf {pop} def/S {pop} def/@b {pop pop pop pop pop pop pop pop} def/_bdsave /save load def/_bdrestore /restore load def/save { dup /fontsave eq {null} {_bdsave} ifelse } def/restore { dup null eq { pop } { _bdrestore } ifelse } def/fontsave null defend/MacVec 256 array def MacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash /questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/findheaderfont {/Helvetica findfont } defend %. AltsysDict%%EndResource%%EndProlog%%BeginSetupAltsysDict begin_bfh _efh end %. AltsysDict%%EndSetupAltsysDict begin /onlyk4{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/cmyk2gray{4 -1 roll 0.3 mul 4 -1 roll 0.59 mul 4 -1 roll 0.11 muladd add add 1 min neg 1 add}bdf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/maxcolor { max max max } ndf/maxspot {pop} ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 packedarray}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{setgray}ndf/setoverprint{pop}ndf /currentoverprint false ndf/cmykbufs2gray{0 1 2 index length 1 sub{ 4 index 1 index get 0.3 mul 4 index 2 index get 0.59 mul 4 index 3 index get 0.11 mul 4 index 4 index get add add add cvi 255 min255 exch sub2 index 3 1 roll put}for4 1 roll pop pop pop}bdf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelseand{userdict begin bdf end}{ndf}ifelsefhnumcolors 1 ne {/yt save def} if/customcolorimage{aload pop(_vc_Registration) eq {pop pop pop pop separationimage}{/ik xdf /iy xdf /im xdf /ic xdfic im iy ik cmyk2gray /xt xdfcurrenttransfer{dup 1.0 exch sub xt mul add}concatprocsst image}ifelse}ndffhnumcolors 1 ne {yt restore} iffhnumcolors 3 ne {/yt save def} if/customcolorimage{aload pop (_vc_Registration) eq {pop pop pop pop separationimage}{/ik xdf /iy xdf /im xdf /ic xdf1.0 dup ic ik add min sub 1.0 dup im ik add min sub 1.0 dup iy ik add min sub /ic xdf /iy xdf /im xdfcurrentcolortransfer4 1 roll {dup 1.0 exch sub ic mul add}concatprocs 4 1 roll {dup 1.0 exch sub iy mul add}concatprocs 4 1 roll {dup 1.0 exch sub im mul add}concatprocs 4 1 roll setcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}true 3 colorimage}ifelse}ndffhnumcolors 3 ne {yt restore} iffhnumcolors 4 ne {/yt save def} if/customcolorimage{aload pop(_vc_Registration) eq {pop pop pop pop separationimage}{/ik xdf /iy xdf /im xdf /ic xdfcurrentcolortransfer{1.0 exch sub ik mul ik sub 1 add}concatprocs 4 1 roll{1.0 exch sub iy mul iy sub 1 add}concatprocs 4 1 roll{1.0 exch sub im mul im sub 1 add}concatprocs 4 1 roll{1.0 exch sub ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}{dummy}true 4 colorimage}ifelse}ndffhnumcolors 4 ne {yt restore} if/separationimage{image}ndf/spotascmyk false ndf/newcmykcustomcolor{6 packedarray}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf /setspotcolor { spots exch getdup 4 get (_vc_Registration) eq{pop 1 exch sub setseparationgray}{0 5 getinterval exch setcustomcolor}ifelse}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{st pop pop pop}ndf/fas{}ndf/sas{}ndf/fhsetspreadsize{pop}ndf/filler{fill}bdf /F{gsave {filler}fp grestore}bdf/f{closepath F}bdf/S{gsave {stroke}fp grestore}bdf/s{closepath S}bdfuserdict /islevel2systemdict /languagelevel known dup{pop systemdict /languagelevel get 2 ge} ifputislevel2 not{/currentcmykcolor{0 0 0 1 currentgray sub} ndf} if/tc{gsavesetcmykcolor currentcmykcolorgrestore} bind def/testCMYKColorThrough{tc add add add 0 ne} bind def/fhiscomposite where not {userdict /fhiscompositeislevel2{gsave 1 1 1 1 setcmykcolor currentcmykcolor grestoreadd add add 4 eq}{1 0 0 0 testCMYKColorThrough0 1 0 0 testCMYKColorThrough0 0 1 0 testCMYKColorThrough0 0 0 1 testCMYKColorThroughand and and} ifelseput}{ pop }ifelse/bc4 [0 0 0 0] def /_lfp4 {1 pop /yt xdf /xt xdf /ang xdf storerect/taperfcn xdf/k2 xdf /y2 xdf /m2 xdf /c2 xdf/k1 xdf /y1 xdf /m1 xdf /c1 xdfc1 c2 sub absm1 m2 sub absy1 y2 sub absk1 k2 sub absmaxcolor calcgraysteps mul abs round height abs adjnumsteps dup 1 lt {pop 1} if 1 sub /numsteps1 xdfcurrentflat mark currentflat clipflatness /delta top bottom sub numsteps1 1 add div def /right right left sub def /botsv top delta sub def {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 dup 0 eq {pop pop 0.5} {div} ifelse taperfcn /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse}loopcleartomark setflat}bdf/bcs [0 0] def /_lfs4 {/yt xdf /xt xdf /ang xdf storerect/taperfcn xdf/tint2 xdf /tint1 xdf bcs exch 1 exch put tint1 tint2 sub abs bcs 1 get maxspot calcgraysteps mul abs round height abs adjnumsteps dup 2 lt {pop 2} if 1 sub /numsteps1 xdfcurrentflat mark currentflat clipflatness /delta top bottom sub numsteps1 1 add div def /right right left sub def /botsv top delta sub def {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 div taperfcn /frac xdfbcs 01.0 tint2 tint1 sub frac mul tint1 add subput bcs vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse}loopcleartomark setflat}bdf/_rfs6 {/tint2 xdf /tint1 xdf bcs exch 1 exch put /inrad xdf /radius xdf /yt xdf /xt xdf tint1 tint2 sub abs bcs 1 get maxspot calcgraysteps mul abs round radius inrad sub abs adjnumsteps dup 1 lt {pop 1} if 1 sub /numsteps1 xdfradius inrad sub numsteps1 dup 0 eq {pop} {div} ifelse 2 div /halfstep xdf currentflat mark currentflat clipflatness {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 dup 0 eq {pop pop 0.5} {div} ifelse /frac xdfbcs 0tint2 tint1 sub frac mul tint1 addput bcs vc1 index setflat { newpath mark xt yt radius inrad sub 1 frac sub mul halfstep add inrad add 0 360{ arcradindex numsteps1 ne inrad 0 gt or {xt yt numsteps1 0 eq{ inrad } { radindex 1 add numsteps1 div 1 exch subradius inrad sub mul halfstep add inrad add}ifelsedup xt add yt moveto360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse}loopcleartomark setflat}bdf/_rfp6 {1 pop /k2 xdf /y2 xdf /m2 xdf /c2 xdf/k1 xdf /y1 xdf /m1 xdf /c1 xdf/inrad xdf /radius xdf /yt xdf /xt xdf c1 c2 sub absm1 m2 sub absy1 y2 sub absk1 k2 sub absmaxcolor calcgraysteps mul abs round radius inrad sub abs adjnumsteps dup 1 lt {pop 1} if 1 sub /numsteps1 xdfradius inrad sub numsteps1 dup 0 eq {pop} {div} ifelse 2 div /halfstep xdf currentflat mark currentflat clipflatness {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 dup 0 eq {pop pop 0.5} {div} ifelse /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { newpath mark xt yt radius inrad sub 1 frac sub mul halfstep add inrad add 0 360{ arcradindex numsteps1 ne inrad 0 gt or {xt yt numsteps1 0 eq{ inrad } { radindex 1 add numsteps1 div 1 exch subradius inrad sub mul halfstep add inrad add}ifelsedup xt add yt moveto360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse}loopcleartomark setflat}bdf/lfp4{_lfp4}ndf/lfs4{_lfs4}ndf/rfs6{_rfs6}ndf/rfp6{_rfp6}ndf/cvc [0 0 0 1] def /vc{AltsysDict /cvc 2 index put aload length dup 4 eq{pop dup -1 eq{pop setrgbcolor}{setcmykcolor}ifelse}{6 eq {sethexcolor} {setspotcolor} ifelse }ifelse}bdf 0 setseparationgray/imgr {3204 9033.45 4045.89 10224 } def /bleed 0 def /clpr {3204 9033.45 4045.89 10224 } def /xs 1 def /ys 1 def /botx 0 def /overlap 0 def /wdist 18 def 0 2 mul fhsetspreadsize 0 0 ne {/df 0 def /clipflatness 0 def} if /maxsteps 256 def /forcemaxsteps false def /minsteps 0 def userdict begin /AGDOrigMtx matrix currentmatrix def end vms-3398 -9357 translate/currentpacking defed{false setpacking}if /spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor]def/cvtr {1 exch sub 3 1 roll} def/vr {[ 3 index 3 index 3 index cvtr cvtr cvtr 0 ]fhiscomposite not {vc pop pop pop}{pop setrgbcolor}ifelse} def/vc {AltsysDict /cvc 2 index put aload length dup 4 eq{pop dup -0.2 ge {setcmykcolor} {pop vr} ifelse}{6 eq {sethexcolor} {setspotcolor} ifelse} ifelse} bdfn[] 0 d3.863708 M1 w0 j0 Jfalse setoverprint0 ifalse eomode[0 0 0 1]vcvms3773.7062 9602.5126 m3773.7062 9602.5126 3772.9451 9592.3463 3772.8025 9590.2688 C3769.6524 9544.3742 3717.6298 9499.8717 3625.5355 9499.8717 C3533.5216 9499.8717 3480.6537 9544.0642 3478.2492 9589.9592 C3478.1501 9591.8519 3477.4606 9602.2031 3477.4606 9602.2031 C3773.7062 9602.5126 Lh[0 0 0.6 -1]vc0 0 0.6 -1 0 0 0.2 -1 /normtaper load 3562.82 9463.17 3724.47 9708.08  70 3625.58 9551.19 lfp4[0 0 0.2 -1]vc0 0 0.2 -1 0 0 0.2 -1 /normtaper load 3562.82 9423.36 3724.47 9463.67  70 3625.58 9551.19 lfp4false setoverprintn3483.6234 9632.7354 m3502.9316 9672.2045 3564.5857 9697.1084 3625.6133 9697.1084 C3686.6409 9697.1084 3748.2735 9672.2045 3767.5476 9632.7354 C3794.0148 9578.5362 3735.1521 9517.1098 3625.5355 9517.1098 C3515.919 9517.1098 3457.1093 9578.5362 3483.6234 9632.7354 Ch[1 0.8 0.2 -1]vc1 0.8 0.2 -1 1 0.4 0 -1 /normtaper load 3502.92 9621.15 3747.02 9730.77  46 3625.57 9607.11 lfp4[1 0.4 0 -1]vc1 0.4 0 -1 0.8 0.2 0 -1 /normtaper load 3502.92 9497.13 3747.02 9621.65  46 3625.57 9607.11 lfp4[0.8 0.2 0 -1]vc0.8 0.2 0 -1 0.8 0.2 0 -1 /normtaper load 3502.92 9482.3 3747.02 9497.63  46 3625.57 9607.11 lfp4false setoverprintn3666.6543 9387.3401 m3664.8699 9374.7705 3659.2183 9368.2791 3651.4682 9368.2791 C3646.55 9368.2791 3643.718 9371.7316 3644.5583 9377.0768 C3647.2784 9394.0384 L3648.3301 9400.3234 3652.0977 9405.2417 3658.8003 9405.2417 C3666.2359 9405.2417 3668.4345 9400.22 3666.6543 9387.3401 Ch3641.1015 9362.4167 m3642.1532 9362.4167 3644.6621 9358.0196 3652.8303 9358.0196 C3670.2146 9358.0196 3680.1591 9370.5849 3682.8834 9386.814 C3686.3403 9406.8106 3676.6026 9415.9234 3664.3523 9415.9234 C3658.5892 9415.9234 3654.7139 9415.4015 3651.5716 9413.7248 C3656.2872 9441.2648 L3641.416 9441.2648 L3627.0748 9359.0091 L3637.9613 9359.0091 L3637.9613 9359.0091 3639.5345 9362.4167 3641.2091 9362.4167 C3641.1015 9362.4167 Lh3791.47 9397.4957 m3793.6724 9409.953 3789.0645 9416.0306 3775.5554 9416.0306 C3765.5033 9416.0306 3761.8349 9412.0523 3758.0677 9408.2762 C3758.5934 9414.7724 L3744.8728 9414.7724 L3743.5111 9404.4056 L3735.7647 9359.0091 L3750.6317 9359.0091 L3755.3472 9388.4907 L3757.0201 9398.6467 3764.0377 9406.3969 3770.6326 9406.3969 C3777.9605 9406.3969 3777.5425 9402.207 3776.3915 9395.8228 C3770.0077 9359.0091 L3784.8704 9359.0091 L3791.47 9397.4957 Lh3851.0538 9415.9234 m3835.4544 9415.9234 L3814.2982 9394.4611 L3813.9836 9394.4611 L3821.9411 9441.2151 L3807.7033 9441.2151 L3793.3578 9359.0091 L3807.8067 9359.0091 L3809.2765 9367.2357 L3812.2077 9385.2449 L3819.8459 9385.2449 3824.1435 9384.4047 3827.4926 9369.2228 C3829.7946 9359.0091 L3844.5624 9359.0091 L3844.5624 9359.0091 3840.8944 9374.5636 3838.4847 9380.6328 C3835.9715 9387.0251 3832.73 9390.7927 3826.8635 9391.9437 C3851.0538 9415.9234 Lh3440.5801 9395.504 m3451.1537 9397.806 3456.1822 9406.608 3457.6478 9412.1557 C3461.4149 9427.4449 3454.6106 9439.3811 3435.1336 9439.17 C3412.8104 9439.1904 L3398.7981 9359.0091 L3413.7728 9359.0091 L3419.5316 9391.2111 L3422.5705 9391.2111 3423.827 9391.3184 3425.2905 9391.1073 C3426.8616 9391.0038 3429.0602 9390.6893 3430.4223 9389.534 C3432.8316 9387.2324 3434.9246 9382.3095 3436.4958 9372.6801 C3438.7978 9359.0091 L3454.087 9359.0091 L3452.3069 9367.2768 3451.1537 9375.0851 3449.6882 9381.3701 C3448.1191 9387.9692 3445.9189 9392.5728 3440.4746 9395.504 C3440.5801 9395.504 Lh3442.5693 9414.3539 m3441.3105 9407.2329 3436.2868 9402.7285 3429.4782 9402.7285 C3420.8937 9402.7285 L3425.3422 9428.0414 L3433.1445 9428.0745 L3440.8925 9428.2814 3443.7203 9421.4749 3442.5693 9414.3539 Ch3508.8545 9399.6939 m3510.9471 9411.8412 3504.4535 9416.0306 3491.3646 9416.0306 C3476.8101 9416.0306 3467.9089 9408.2762 3467.9089 9408.2762 C3472.9348 9399.7973 L3472.9348 9399.7973 3479.7412 9405.9785 3490.317 9405.9785 C3493.7738 9405.9785 3494.7138 9403.6768 3494.1923 9399.7973 C3493.0413 9392.5728 L3471.9928 9393.099 3461.2081 9388.5983 3458.8004 9374.7705 C3456.8092 9363.4639 3465.3979 9358.438 3474.9244 9358.438 C3479.8447 9358.438 3483.7217 9358.7526 3488.5369 9362.9424 C3489.4806 9360.2139 3491.05 9358.9637 3492.9357 9358.6491 C3495.9724 9358.0196 3501.3133 9358.5414 3502.8823 9359.6967 C3502.7789 9361.3692 3502.8823 9365.6624 3504.6625 9375.7146 C3508.8545 9399.6939 Lh3491.5757 9384.9304 m3490.1101 9376.7618 L3489.0626 9370.0592 3483.2994 9366.9212 3479.0083 9366.9212 C3473.5644 9366.9212 3471.3636 9370.0592 3472.3078 9374.3567 C3473.5644 9381.4736 3477.5448 9383.3571 3480.9978 9384.3012 C3482.778 9384.8227 3488.5369 9384.9304 3491.5757 9384.9304 Ch3536.5992 9358.0196 m3553.9835 9358.0196 3563.9323 9370.5849 3566.6523 9386.814 C3570.1091 9406.8106 3560.3694 9415.9234 3548.1191 9415.9234 C3542.3602 9415.9234 3538.487 9415.4015 3535.237 9413.7248 C3539.9526 9441.2648 L3525.187 9441.2648 L3510.8415 9359.0091 L3521.7322 9359.0091 L3521.7322 9359.0091 3523.3013 9362.4167 3524.8745 9362.4167 C3525.9179 9362.4167 3528.4327 9358.0196 3536.5992 9358.0196 Ch3542.6727 9405.2417 m3550.1082 9405.2417 3552.3089 9400.22 3550.5284 9387.3401 C3548.746 9374.7705 3543.0927 9368.2791 3535.237 9368.2791 C3530.3167 9368.2791 3527.4911 9371.7316 3528.4327 9377.0768 C3531.157 9394.0384 L3532.2024 9400.3234 3535.9722 9405.2417 3542.5692 9405.2417 C3542.6727 9405.2417 Lh3591.9936 9357.5973 m3578.1722 9358.3303 3569.898 9368.7013 3570.9477 9382.1027 C3572.2022 9401.2629 3583.3036 9417.389 3605.3993 9416.238 C3622.8828 9415.2981 3627.2816 9403.8837 3626.6546 9391.3184 C3625.6049 9371.5248 3613.9816 9356.4467 3591.9936 9357.5973 C3591.9936 9357.5973 Lh3593.7738 9367.9645 m3604.977 9367.3349 3610.005 9380.5336 3610.7358 9391.7368 C3611.156 9397.6034 3612.2014 9405.4527 3603.7225 9405.7673 C3592.7267 9406.3969 3587.0712 9392.366 3586.3382 9381.6846 C3585.8167 9373.9345 3587.9093 9368.2795 3593.7738 9367.9645 C3593.7738 9367.9645 Lh3733.9888 9399.905 m3736.0793 9412.0523 3729.5836 9416.238 3716.6003 9416.238 C3702.0479 9416.238 3693.1467 9408.4874 3693.1467 9408.4874 C3698.1684 9400.0084 L3698.1684 9400.0084 3704.9833 9406.1857 3715.5527 9406.1857 C3719.01 9406.1857 3719.9494 9403.8837 3719.3245 9400.0084 C3718.1735 9392.784 L3697.1254 9393.3059 3686.3403 9388.8056 3683.9306 9374.9816 C3681.9393 9363.675 3690.5302 9358.6491 3700.0566 9358.6491 C3704.9833 9358.6491 3708.8543 9358.9637 3713.6691 9363.1493 C3714.6132 9360.4292 3716.1822 9359.1706 3718.0658 9358.856 C3721.1047 9358.2268 3726.4455 9358.7526 3728.0188 9359.9036 C3727.9111 9361.5803 3728.0188 9365.8693 3729.7948 9375.9258 C3733.9888 9399.905 Lh3706.2377 9384.5124 m3708.0136 9385.0338 3713.7768 9385.1373 3716.708 9385.1373 C3715.2424 9376.9733 L3714.1905 9370.2703 3708.4359 9367.1281 3704.2461 9367.1281 C3698.8022 9367.1281 3696.5993 9370.2703 3697.44 9374.5636 C3698.6983 9381.6846 3702.6728 9383.5683 3706.1301 9384.5124 C3706.2377 9384.5124 L[0 0 0.6 -1]vcf n3628.0437 9522.997 m3625.5164 9520.9762 L3622.9475 9522.997 L3623.1254 9547.1267 L3625.5414 9548.8473 L3627.9122 9547.1266 L3628.0437 9522.997 L[1 1 1 -1]vcf ntrue eomode3521.3163 9632.899 m3532.2469 9662.9596 3578.106 9683.0757 3625.6545 9683.0757 C3673.203 9683.0757 3719.0249 9662.9596 3729.8998 9632.899 C3743.6496 9594.8916 3698.5754 9555.823 3625.5366 9555.823 C3552.4979 9555.823 3507.4961 9594.8916 3521.3163 9632.899 Ch3518.3024 9632.899 m3529.8382 9663.7352 3576.9785 9684.2667 3625.6557 9684.2667 C3674.3328 9684.2667 3721.435 9663.7352 3732.9137 9632.899 C3747.5266 9593.6434 3701.2702 9552.9765 3625.534 9552.9765 C3549.7979 9552.9765 3503.6169 9593.6434 3518.3024 9632.899 Cf nfalse eomode3717.0862 9543.2789 m3716.7938 9540.7783 L3713.3266 9541.4212 L3694.4601 9560.6288 L3694.9447 9562.8542 L3698.1179 9562.3033 L3717.0862 9543.2789 Lf n3763.227 9588.0067 m3764.7878 9586.0594 L3762.1151 9585.5005 L3735.846 9594.3812 L3734.5505 9596.2369 L3737.1201 9596.7567 L3763.227 9588.0067 Lf n3761.5363 9633.9651 m3763.8443 9632.9042 L3762.5539 9631.8161 L3739.3954 9631.8163 L3737.2079 9632.9043 L3738.5502 9633.9653 L3761.5363 9633.9651 Lf n3728.3481 9668.5405 m3730.6448 9668.2361 L3730.5566 9667.104 L3714.7842 9661.7755 L3712.4615 9662.1197 L3712.6208 9663.2728 L3728.3481 9668.5405 Lf n3569.2607 9688.1094 m3570.0363 9689.0482 L3572.0034 9688.8087 L3579.7927 9680.9969 L3578.9899 9680.0011 L3576.9815 9680.2495 L3569.2607 9688.1094 Lf n3520.7396 9667.113 m3520.6338 9668.2323 L3522.9507 9668.5493 L3538.6677 9663.2817 L3538.8059 9662.1154 L3536.5016 9661.7845 L3520.7396 9667.113 Lf n3488.6694 9631.8291 m3487.3718 9632.898 L3489.691 9633.978 L3512.6761 9633.9777 L3514.009 9632.8978 L3511.8269 9631.8289 L3488.6694 9631.8291 Lf n3489.0093 9585.5148 m3486.3475 9586.0512 L3487.9021 9588.0208 L3514.0249 9596.7698 L3516.6048 9596.2292 L3515.2944 9594.3944 L3489.0093 9585.5148 Lf n3537.7011 9541.4299 m3534.2662 9540.7704 L3533.9451 9543.2876 L3552.9503 9562.3112 L3556.1566 9562.8474 L3556.6048 9560.6367 L3537.7011 9541.4299 Lf ntrue eomode3625.1945 9668.3591 m3633.1326 9642.9475 L3672.0547 9658.639 L3645.164 9636.5113 L3698.5496 9631.6257 L3646.0224 9626.7759 L3683.2762 9598.148 L3634.2032 9619.3997 L3625.2058 9581.8123 L3616.5674 9619.307 L3567.1311 9598.148 L3604.5121 9626.5634 L3551.849 9631.6257 L3605.0739 9636.313 L3578.3368 9658.639 L3616.919 9642.8691 L3625.1945 9668.3591 Lh3625.1978 9678.2336 m3635.5594 9646.4126 L3685.2899 9666.2751 L3651.4556 9638.0591 L3722.1935 9631.6354 L3652.8933 9625.1869 L3705.0788 9585.5952 L3637.2808 9615.239 L3625.2153 9561.762 L3613.6272 9615.1129 L3545.3446 9585.5952 L3597.6905 9624.9026 L3528.216 9631.6354 L3598.7364 9637.7998 L3565.1092 9666.2751 L3614.3957 9646.3117 L3625.1978 9678.2336 Lf nfalse eomode3761.2631 9643.1446 m3756.3967 9643.1097 3746.9059 9643.5553 3741.4966 9647.2161 C3739.7373 9648.6591 L3739.7373 9648.6591 3737.92 9650.0946 3738.4711 9651.1547 C3740.5646 9652.8681 L3740.5646 9652.8681 3741.7617 9653.6104 3743.5317 9653.693 C3753.1795 9652.6681 L3756.153 9649.6258 3758.8714 9646.4408 3761.2631 9643.1446 Ch3772.3522 9593.4777 m3768.2571 9594.3307 3763.2499 9595.435 3758.7399 9596.8911 C3747.8907 9600.391 3739.6981 9603.6554 3735.8551 9606.5295 C3735.8551 9606.5295 3719.0876 9610.853 3713.4548 9612.4213 C3707.8192 9613.9888 3692.2879 9619.4987 3687.5647 9621.1778 C3682.8422 9622.8564 3653.4423 9629.4137 3653.4423 9629.4137 C3653.4423 9629.4137 3647.5542 9631.2871 3644.034 9631.786 C3644.034 9631.786 3631.1819 9635.7044 3627.6763 9632.3604 C3627.6763 9632.3604 3620.9547 9629.8504 3620.0435 9629.7395 C3619.132 9629.6286 3611.4951 9630.2289 3610.8624 9631.4761 C3610.2287 9632.725 3614.1795 9634.5534 3614.1795 9634.5534 C3614.1795 9634.5534 3626.9514 9651.6294 3634.5121 9647.8786 C3639.4239 9643.2843 L3639.4239 9643.2843 3642.0571 9640.6976 3645.7535 9639.701 C3650.2048 9639.7279 3664.8557 9639.8162 3664.8557 9639.8162 C3674.1635 9639.9537 3680.4239 9637.2684 3680.4239 9637.2684 C3682.1792 9636.5548 L3682.1792 9636.5548 3692.0043 9632.4485 3702.2408 9632.3024 C3701.0432 9636.3306 3699.1315 9638.5517 3697.591 9641.345 C3697.1155 9642.2821 L3695.7939 9644.7733 L3695.2034 9645.6941 L3691.8533 9650.8879 3685.8469 9657.7617 3680.5681 9662.1399 C3677.4362 9664.7414 3672.8642 9665.572 3670.6459 9665.838 C3669.5553 9665.9713 3668.2342 9665.2637 3667.3789 9665.1596 C3666.5237 9665.0556 3663.7429 9664.6694 3663.1405 9665.8566 C3661.9378 9668.2271 3666.0751 9669.4867 3666.9191 9671.8793 C3670.5717 9673.2548 3671.4415 9672.1576 3674.6918 9671.6972 C3674.6918 9671.6972 3676.8456 9671.0316 3679.1795 9671.3156 C3681.517 9671.5999 3682.1282 9673.133 3684.8645 9673.4659 C3687.601 9673.7988 3690.0413 9672.4392 3690.8656 9670.8147 C3691.6885 9669.1927 3692.4993 9666.6395 3694.2164 9664.3315 C3695.9312 9662.0209 3706.9062 9657.325 3711.9574 9651.7758 C3715.6081 9647.7717 3719.0839 9643.1 3719.5806 9642.3631 C3720.0727 9641.6287 3719.7336 9641.4546 3722.5523 9637.6886 C3725.3709 9633.9231 3733.9136 9630.9194 3737.0157 9630.4748 C3739.4678 9630.064 L3757.8748 9628.4001 L3770.0373 9626.9603 L3774.2601 9615.8022 3774.8245 9604.5501 3772.3522 9593.4777 Ch3762.4587 9571.297 m3757.2381 9572.6127 3753.5285 9573.5557 3752.4661 9573.7257 C3748.4541 9573.7693 L3748.4541 9573.7693 3739.1221 9575.9475 3736.3612 9576.141 C3733.6031 9576.3365 3720.2314 9579.283 3716.4234 9581.5021 C3716.4234 9581.5021 3709.9698 9590.6742 3714.0021 9590.9094 C3720.3703 9591.2808 3724.6439 9588.8195 3724.6439 9588.8195 C3728.2967 9587.7263 L3740.8415 9582.1474 3758.7079 9584.8018 3769.8104 9585.2294 C3768.0219 9580.4343 3765.4543 9575.8345 3762.4587 9571.297 C[0.7 0.7 0.56 0]vcf qWn[1 0 0 1 3692.307907 9622.406738] concat81.3983 -19.8941 m81.3983 -19.8941 80.6372 -30.0605 80.4946 -32.138 C77.3445 -78.0326 25.3219 -122.535 -66.7724 -122.535 C-158.7863 -122.535 -211.6542 -78.3425 -214.0587 -32.4476 C-214.1578 -30.5548 -214.8473 -20.2036 -214.8473 -20.2036 C81.3983 -19.8941 Lh[1 1 0.764 0]vc1 1 0.68 0 1 1 0.8 0 /normtaper load -129.49 -159.239 32.163 85.673  70 -66.7245 -71.2146 lfp4[1 1 0.8 0]vc1 1 0.8 0 1 1 0.8 0 /normtaper load -129.49 -199.046 32.163 -158.739  70 -66.7245 -71.2146 lfp4false setoverprintn-208.6845 10.3287 m-189.3763 49.7977 -127.7222 74.7017 -66.6946 74.7017 C-5.667 74.7017 55.9656 49.7977 75.2397 10.3287 C101.7069 -43.8706 42.8442 -105.2969 -66.7724 -105.2969 C-176.3889 -105.2969 -235.1986 -43.8706 -208.6845 10.3287 Ch[0.91 0.928 0.8 0]vc0.7 0.76 0.8 0 0.7 0.88 0.86 0 /normtaper load -189.388 -1.2531 54.716 108.367  46 -66.7338 -15.2976 lfp4[0.91 0.964 0.818 0]vc0.7 0.88 0.86 0 0.76 0.94 0.86 0 /normtaper load -189.388 -125.281 54.716 -0.7531  46 -66.7338 -15.2976 lfp4[0.928 0.982 0.818 0]vc0.76 0.94 0.86 0 0.76 0.94 0.86 0 /normtaper load -189.388 -140.106 54.716 -124.781  46 -66.7338 -15.2976 lfp4false setoverprintntrue eomode-170.9916 10.4922 m-160.061 40.5529 -114.2019 60.669 -66.6534 60.669 C-19.1049 60.669 26.717 40.5529 37.5919 10.4922 C51.3417 -27.5151 6.2675 -66.5838 -66.7713 -66.5838 C-139.81 -66.5838 -184.8118 -27.5151 -170.9916 10.4922 Ch-174.0055 10.4922 m-162.4697 41.3285 -115.3294 61.86 -66.6523 61.86 C-17.9751 61.86 29.1271 41.3285 40.6058 10.4922 C55.2186 -28.7634 8.9623 -69.4302 -66.7739 -69.4302 C-142.51 -69.4302 -188.691 -28.7634 -174.0055 10.4922 C[0.7 0.7 0.56 0]vcf nfalse eomode70.9191 -34.4 m72.4798 -36.3474 L69.8072 -36.9062 L43.5381 -28.0255 L42.2426 -26.1698 L44.8122 -25.65 L70.9191 -34.4 L[0.7 0.7 0.56 0]vcf n69.2283 11.5584 m71.5364 10.4975 L70.246 9.4094 L47.0875 9.4096 L44.9 10.4975 L46.2423 11.5585 L69.2283 11.5584 L[0.7 0.7 0.56 0]vcf n36.0402 46.1337 m38.3369 45.8294 L38.2487 44.6973 L22.4763 39.3688 L20.1536 39.713 L20.3129 40.866 L36.0402 46.1337 L[0.7 0.7 0.56 0]vcf ntrue eomode-67.1134 45.9524 m-59.1753 20.5407 L-20.2533 36.2322 L-47.1439 14.1046 L6.2417 9.219 L-46.2855 4.3692 L-9.0317 -24.2587 L-58.1047 -3.0071 L-67.1021 -40.5944 L-75.7405 -3.0997 L-125.1768 -24.2587 L-87.7958 4.1566 L-140.4589 9.219 L-87.234 13.9063 L-113.9711 36.2322 L-75.3889 20.4624 L-67.1134 45.9524 Lh-67.1102 55.8268 m-56.7485 24.0059 L-7.018 43.8684 L-40.8523 15.6523 L29.8856 9.2287 L-39.4146 2.7802 L12.7709 -36.8116 L-55.0271 -7.1678 L-67.0926 -60.6447 L-78.6808 -7.2938 L-146.9633 -36.8116 L-94.6174 2.4958 L-164.0919 9.2287 L-93.5715 15.393 L-127.1987 43.8684 L-77.9122 23.9049 L-67.1102 55.8268 L[0.7 0.7 0.56 0]vcf nQfalse eomodenvmrs3676.1125 9750.7249 m3673.2151 9750.6237 3672.6138 9753.1285 3673.3146 9757.5775 C3672.9586 9757.7102 3672.6012 9757.8858 3672.2615 9758.0373 C3671.4237 9761.3113 3670.7332 9767.219 3672.2629 9770.3787 C3673.0104 9771.9226 3673.8946 9773.9498 3673.3839 9775.7526 C3670.5426 9785.7837 3664.9128 9794.5275 3660.9424 9804.0556 C3659.8657 9806.6395 3660.0448 9808.5017 3659.8894 9811.145 C3656.8165 9814.6288 3653.2586 9823.7565 3651.5455 9829.3926 C3647.9683 9820.0675 3645.5955 9809.3589 3645.5955 9806.8793 C3645.5955 9796.3866 3655.92 9791.3019 3652.3429 9773.8606 C3651.6527 9770.4958 3650.4229 9765.8414 3649.198 9761.0365 C3651.3418 9748.8827 3651.3418 9740.063 3654.4995 9725.9795 C3658.914 9721.4833 3662.6033 9715.7073 3664.5665 9708.3748 C3665.781 9703.8384 3669.4963 9693.182 3674.2401 9691.5852 C3677.1822 9690.5947 3679.2834 9690.5164 3680.1659 9688.1836 C3681.5591 9684.5011 3665.6345 9672.02 3667.7146 9675.5342 C3667.8484 9681.5368 3664.2636 9688.1544 3660.6033 9692.8787 C3657.0785 9697.4281 3650.9998 9701.0585 3648.1193 9705.8901 C3645.8217 9709.7439 3642.253 9717.9542 3640 9721.8562 C3637.2363 9706.9091 L3640.9946 9690.9515 3639.8444 9689.2861 3635.412 9674.4818 C3633.7556 9668.9494 3632.2558 9662.2491 3631.7481 9657.236 C3631.0052 9649.9012 3623.6425 9666.2763 3623.6425 9666.2763 C3623.6434 9668.687 3623.0074 9695.0527 3622.9958 9697.0932 C3622.9958 9702.7779 3622.6432 9704.8813 3621.3518 9709.8916 C3619.0525 9714.5009 3619.4697 9721.0455 3619.7832 9726.0177 C3620.308 9734.3418 3620.073 9750.0177 3620.4242 9754.1432 C3617.658 9761.1451 3610.5755 9773.7928 3609.8674 9780.9118 C3608.7641 9792.0058 3610.5843 9803.23 3609.0834 9814.2882 C3607.2343 9808.746 3605.272 9801.722 3601.0938 9797.479 C3594.8343 9791.1224 3589.0545 9784.0766 3583.4716 9777.111 C3581.4325 9774.2407 3583.2341 9772.842 3580.0765 9768.2511 C3576.9707 9763.7355 3578.6355 9765.7731 3577.9876 9761.4581 C3577.876 9760.7141 3577.5128 9760.1275 3577.2712 9759.8718 C3575.6077 9758.4342 3573.8434 9757.2056 3571.464 9758.2352 C3566.8578 9760.6179 3566.5293 9764.1428 3566.212 9768.6798 C3565.6068 9777.3347 3571.82 9777.7437 3575.3387 9782.9812 C3582.2485 9793.2667 3585.7458 9810.5162 3593.1454 9818.282 C3593.6077 9819.818 3595.339 9825.3533 3598.6494 9833.5964 C3598.7469 9843.8345 3601.2043 9852.9431 3611.4212 9857.1457 C3615.6072 9858.8676 3621.0947 9859.3038 3621.2991 9865.2643 C3621.3235 9865.9742 3621.1801 9867.8069 3620.739 9868.4565 C3619.0498 9869.8606 3617.8739 9869.8956 3617.0594 9870.8907 C3615.4037 9873.0806 3614.0368 9887.1559 3614.2176 9888.0548 C3616.6198 9899.9971 3622.1587 9903.9774 3629.1842 9903.6186 C3637.4886 9903.1945 3644.2392 9899.0875 3643.8822 9887.5929 C3643.5949 9878.3391 3634.154 9866.4704 3648.0271 9861.9696 C3653.3251 9860.2508 3654.3327 9861.4431 3658.8892 9856.7249 C3663.9954 9851.4375 3665.2355 9842.0487 3666.0872 9833.346 C3671.2938 9820.8904 L3680.8429 9804.3367 3677.3863 9799.1002 3680.8982 9782.2456 C3681.807 9777.8845 3683.3734 9774.0248 3683.7063 9764.4908 C3683.8652 9759.9405 3680.9347 9750.8933 3676.1125 9750.7249 Ch[1 0.7 0.5 -1]vc1 0.7 0.5 -1 0.7 0.7 0.88 -1 /normtaper load 3523.84 9742.68 3734.07 9850.16  57 3624.94 9779.49 lfp4[0.7 0.7 0.88 -1]vc0.7 0.7 0.88 -1 0 0 0.2 -1 /normtaper load 3523.84 9684.27 3734.07 9743.18  57 3624.94 9779.49 lfp4[0 0 0.2 -1]vc0 0 0.2 -1 0 0 0.2 -1 /normtaper load 3523.84 9682.33 3734.07 9684.77  57 3624.94 9779.49 lfp4false setoverprintn3574.5175 9762.1494 m3574.9566 9766.5633 3574.3537 9766.1593 3577.1682 9770.2514 C3579.7786 9774.0467 3578.3433 9775.9774 3580.6534 9779.2362 C3586.3295 9786.3262 3592.2089 9793.487 3598.5788 9799.9556 C3602.841 9804.2839 3608.2883 9818.8545 3609.6455 9823.9692 C3609.9076 9824.7206 3610.3189 9825.091 3610.49 9824.4428 C3611.3829 9814.6826 3613.1077 9806.5439 3612.7613 9796.9519 C3612.0339 9776.8093 3613.1187 9777.8937 3620.6118 9760.1062 C3621.7345 9767.4279 3623.7331 9778.5504 3627.548 9782.3653 C3622.4021 9762.7572 3622.0835 9734.813 3621.5409 9726.2069 C3621.2651 9721.8323 3620.0725 9714.9277 3622.1715 9710.9004 C3622.8766 9708.1759 3622.9275 9704.0672 3622.9911 9700.9458 C3623.0036 9699.0412 3623.1225 9666.5505 3623.1225 9666.5505 C3620.1083 9651.4659 L3619.0273 9647.1126 3613.486 9639.6561 3609.262 9637.5153 C3608.0959 9636.9243 3604.8431 9635.138 3604.8431 9633.6585 C3604.8431 9631.2771 3620.198 9626.8263 3623.699 9632.2428 C3626.3344 9636.3202 3628.4991 9638.5605 3631.6369 9641.5646 C3636.4727 9646.1945 3631.113 9650.9662 3631.7481 9657.236 C3632.8548 9668.1629 3637.5573 9677.6482 3639.0987 9687.9685 C3640.0265 9694.18 3639.1272 9699.8545 3636.293 9706.9335 C3639.0758 9726.4616 L3641.3333 9723.0603 3643.4683 9717.6602 3645.6265 9713.1645 C3649.461 9705.1764 3649.5171 9704.3967 3656.1501 9697.8473 C3658.3837 9695.6419 3660.6939 9693.0311 3662.3751 9690.3605 C3665.4963 9685.4026 3667.6445 9680.487 3667.3701 9674.5733 C3665.0662 9670.4113 3664.0775 9670.67 3661.131 9668.1496 C3661.2258 9668.0086 3660.3083 9665.7143 3663.1145 9665.7143 C3673.1028 9665.7143 3671.8643 9670.9315 3675.6448 9677.6969 C3678.0882 9682.0698 3685.0923 9688.719 3677.409 9691.0231 C3674.9953 9691.7469 3671.9297 9692.5901 3670.5306 9694.9271 C3665.2003 9703.8311 3665.0999 9704.2047 3662.3305 9712.3994 C3660.6544 9717.3588 3657.9347 9721.3653 3653.9021 9724.6248 C3651.4417 9730.2147 3650.4645 9734.1894 3649.6706 9740.1293 C3648.594 9748.1837 3647.5184 9753.9493 3646.1507 9762.1861 C3650.0512 9777.6485 3652.3987 9780.92 3645.7682 9795.7868 C3644.2437 9799.205 3642.6884 9802.8447 3642.6884 9806.8793 C3642.6884 9814.4949 3646.1011 9826.0892 3648.7428 9831.8423 C3649.6638 9834.1833 3651.6979 9834.9427 3652.8622 9834.3002 C3653.3618 9828.8056 3659.9278 9815.5911 3663.1438 9812.5708 C3663.3453 9810.1476 3663.2466 9807.7027 3664.2006 9805.4133 C3668.2533 9795.6875 3673.0419 9786.8444 3675.9457 9776.5929 C3676.9433 9773.0707 3675.7883 9771.371 3674.7856 9768.5319 C3674.4754 9767.1639 3674.2227 9763.2137 3674.8289 9760.2781 C3676.3905 9759.5211 L3675.8465 9757.4914 3675.5612 9753.7264 3676.6021 9753.7627 C3678.7964 9753.8393 3680.9474 9761.375 3680.835 9764.5938 C3680.4905 9774.4575 3678.5873 9778.8699 3678.0094 9781.8094 C3674.7207 9798.5374 3677.488 9803.1338 3668.1245 9819.3201 C3662.6256 9832.4751 L3661.9705 9839.2191 3660.6726 9854.5924 3652.0411 9857.3525 C3650.5899 9857.8166 3649.1296 9857.9011 3646.9378 9858.6122 C3635.6431 9862.2764 3635.6771 9870.9469 3638.7553 9880.4189 C3641.496 9888.8517 3641.8579 9898.7929 3629.4522 9899.8377 C3621.7741 9900.4843 3619.4447 9894.4409 3617.8035 9887.482 C3617.8582 9886.7247 3618.2409 9875.4111 3619.9113 9872.9766 C3623.192 9870.5357 3625.0363 9871.2542 3624.8268 9865.1433 C3624.6508 9860.009 3621.3919 9856.9783 3616.9569 9855.4171 C3609.7383 9852.876 3606.0512 9851.3927 3603.6152 9843.9471 C3602.8505 9841.6099 3602.1969 9838.2528 3602.1768 9833.242 C3602.1754 9832.9033 L3600.1143 9827.7899 3597.8587 9821.9315 3596.2851 9816.439 C3587.4007 9807.531 3585.2467 9787.2609 3576.2488 9778.7017 C3570.2714 9773.0157 3568.2905 9772.6521 3570.481 9763.8834 C3570.7024 9762.9969 3572.3546 9761.7582 3572.9662 9761.4303 C3573.4058 9761.2697 3573.9092 9761.6718 3574.2303 9761.92 C3574.5175 9762.1494 Lh[0 0 0.6 -1]vc0 0 0.6 -1 0 0 0.2 -1 /normtaper load 3494.54 9719.88 3753.59 9819.12  69 3625.26 9764.78 lfp4[0 0 0.2 -1]vc0 0 0.2 -1 0 0 0.2 -1 /normtaper load 3494.54 9684.57 3753.59 9720.38  69 3625.26 9764.78 lfp4false setoverprintnvmrvmrend%%Trailer